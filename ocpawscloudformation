AWSTemplateFormatVersion: '2010-09-09'
Description: OpenShift 4 cluster infrastructure on existing AWS VPC - Internal
  Network Load Balancer with Route53 DNS and Ignition Config Download

Parameters:
  # Existing Infrastructure Parameters
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Existing VPC ID where OpenShift will be deployed

  HostedZoneId:
    Type: AWS::Route53::HostedZone::Id
    Description: Existing Route53 Hosted Zone ID for the base domain

  PrivateSubnetAZ1Id:
    Type: AWS::EC2::Subnet::Id
    Description: Existing private subnet in AZ1

  PrivateSubnetAZ2Id:
    Type: AWS::EC2::Subnet::Id
    Description: Existing private subnet in AZ2

  PrivateSubnetAZ3Id:
    Type: AWS::EC2::Subnet::Id
    Description: Existing private subnet in AZ3

  # OpenShift Configuration
  ClusterName:
    Type: String
    Default: ocp
    Description: Name of the OpenShift cluster (will be subdomain of BaseDomain)

  BaseDomain:
    Type: String
    Default: test.local
    Description: Base domain for the cluster (e.g., test.local for internal DNS)

  # Ignition Configuration Parameters
  IgnitionServerIP:
    Type: String
    Description: IP address of the server hosting ignition config files (e.g., 10.0.1.100)
    AllowedPattern: ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
    ConstraintDescription: Must be a valid IP address

  IgnitionServerPort:
    Type: Number
    Default: 8080
    Description: Port number for the ignition config server (default 8080)
    MinValue: 1
    MaxValue: 65535

  IgnitionPath:
    Type: String
    Default: /ignition
    Description: Path on the ignition server where config files are stored (default
      /ignition)

Resources:
  # OpenShift Cluster Security Group (shared by all cluster nodes)
  ClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for OpenShift cluster nodes
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6443
          ToPort: 6443
          CidrIp: 10.0.0.0/8
        - IpProtocol: tcp
          FromPort: 22623
          ToPort: 22623
          CidrIp: 10.0.0.0/8
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 10.0.0.0/8
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.0.0.0/8
        # Allow all traffic within the VPC for cluster communication
        - IpProtocol: '-1'
          CidrIp: 10.0.0.0/8
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-cluster-sg

  MasterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Additional security group for OpenShift master nodes
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-master-sg

  WorkerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Additional security group for OpenShift worker nodes
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-worker-sg

  BootstrapSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Additional security group for OpenShift bootstrap node
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-bootstrap-sg

  # Network Load Balancer (internal-only) - handles all TCP traffic
  NetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${ClusterName}-nlb
      Scheme: internal
      Type: network
      Subnets:
        - !Ref PrivateSubnetAZ1Id
        - !Ref PrivateSubnetAZ2Id
        - !Ref PrivateSubnetAZ3Id
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-nlb

  # Target Groups with Targets defined
  APITargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ClusterName}-api-tg
      Port: 6443
      Protocol: TCP
      VpcId: !Ref VpcId
      TargetType: instance
      HealthCheckProtocol: TCP
      HealthCheckPort: '6443'
      HealthCheckIntervalSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      Targets:
        - Id: !Ref BootstrapNode
          Port: 6443
        - Id: !Ref MasterNode1
          Port: 6443
        - Id: !Ref MasterNode2
          Port: 6443
        - Id: !Ref MasterNode3
          Port: 6443

  MCSTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ClusterName}-mcs-tg
      Port: 22623
      Protocol: TCP
      VpcId: !Ref VpcId
      TargetType: instance
      HealthCheckProtocol: TCP
      HealthCheckPort: '22623'
      HealthCheckIntervalSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      Targets:
        - Id: !Ref BootstrapNode
          Port: 22623
        - Id: !Ref MasterNode1
          Port: 22623
        - Id: !Ref MasterNode2
          Port: 22623
        - Id: !Ref MasterNode3
          Port: 22623

  HTTPTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ClusterName}-http-tg
      Port: 80
      Protocol: TCP
      VpcId: !Ref VpcId
      TargetType: instance
      HealthCheckProtocol: TCP
      HealthCheckPort: '80'
      HealthCheckIntervalSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      Targets:
        - Id: !Ref WorkerNode1
          Port: 80
        - Id: !Ref WorkerNode2
          Port: 80
        - Id: !Ref WorkerNode3
          Port: 80

  HTTPSTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ClusterName}-https-tg
      Port: 443
      Protocol: TCP
      VpcId: !Ref VpcId
      TargetType: instance
      HealthCheckProtocol: TCP
      HealthCheckPort: '443'
      HealthCheckIntervalSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      Targets:
        - Id: !Ref WorkerNode1
          Port: 443
        - Id: !Ref WorkerNode2
          Port: 443
        - Id: !Ref WorkerNode3
          Port: 443

  # Listeners
  APIListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref APITargetGroup
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Port: 6443
      Protocol: TCP
  MCSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MCSTargetGroup
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Port: 22623
      Protocol: TCP

  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref HTTPTargetGroup
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Port: 80
      Protocol: TCP

  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref HTTPSTargetGroup
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Port: 443
      Protocol: TCP

  # Bootstrap Node with ignition config download
  BootstrapNode:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 200
            VolumeType: gp2
      ImageId: ami-08f1807771f4e468b # 4.18 AMI - replace with newer RHCOS AMI if needed
      InstanceType: t3.2xlarge
      SubnetId: !Ref PrivateSubnetAZ1Id
      SecurityGroupIds:
        - !Ref ClusterSecurityGroup
        - !Ref BootstrapSecurityGroup
      UserData: !Base64
        Fn::Sub: |
          {
            "ignition": {
              "version": "3.2.0",
              "config": {
                "merge": [{
                  "source": "http://${IgnitionServerIP}:${IgnitionServerPort}${IgnitionPath}/bootstrap.ign"
                }]
              }
            }
          }
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-bootstrap

  # Master Nodes with ignition config download
  MasterNode1:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 200
            VolumeType: gp2
      ImageId: ami-08f1807771f4e468b # 4.18 AMI - replace with newer RHCOS AMI if needed
      InstanceType: t2.2xlarge
      SubnetId: !Ref PrivateSubnetAZ1Id
      SecurityGroupIds:
        - !Ref ClusterSecurityGroup
        - !Ref MasterSecurityGroup
      UserData: !Base64
        Fn::Sub: |
          {
            "ignition": {
              "version": "3.2.0",
              "config": {
                "merge": [{
                  "source": "http://${IgnitionServerIP}:${IgnitionServerPort}${IgnitionPath}/master.ign"
                }]
              }
            }
          }
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-master-1

  MasterNode2:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 200
            VolumeType: gp2
      ImageId: ami-08f1807771f4e468b # 4.18 AMI - replace with newer RHCOS AMI if needed
      InstanceType: t2.2xlarge
      SubnetId: !Ref PrivateSubnetAZ2Id
      SecurityGroupIds:
        - !Ref ClusterSecurityGroup
        - !Ref MasterSecurityGroup
      UserData: !Base64
        Fn::Sub: |
          {
            "ignition": {
              "version": "3.2.0",
              "config": {
                "merge": [{
                  "source": "http://${IgnitionServerIP}:${IgnitionServerPort}${IgnitionPath}/master.ign"
                }]
              }
            }
          }
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-master-2

  MasterNode3:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 200
            VolumeType: gp2
      ImageId: ami-08f1807771f4e468b # 4.18 AMI - replace with newer RHCOS AMI if needed
      InstanceType: t2.2xlarge
      SubnetId: !Ref PrivateSubnetAZ3Id
      SecurityGroupIds:
        - !Ref ClusterSecurityGroup
        - !Ref MasterSecurityGroup
      UserData: !Base64
        Fn::Sub: |
          {
            "ignition": {
              "version": "3.2.0",
              "config": {
                "merge": [{
                  "source": "http://${IgnitionServerIP}:${IgnitionServerPort}${IgnitionPath}/master.ign"
                }]
              }
            }
          }
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-master-3

  # Worker Nodes with ignition config download
  WorkerNode1:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 300
            VolumeType: gp2
        - DeviceName: /dev/xvdb
          Ebs:
            VolumeSize: 500
            VolumeType: gp2
      ImageId: ami-08f1807771f4e468b # 4.18 AMI - replace with newer RHCOS AMI if needed
      InstanceType: t2.2xlarge # Minimum for OCP base install to test need larger instance for CP4D
      SubnetId: !Ref PrivateSubnetAZ1Id
      SecurityGroupIds:
        - !Ref ClusterSecurityGroup
        - !Ref WorkerSecurityGroup
      UserData: !Base64
        Fn::Sub: |
          {
            "ignition": {
              "version": "3.2.0",
              "config": {
                "merge": [{
                  "source": "http://${IgnitionServerIP}:${IgnitionServerPort}${IgnitionPath}/worker.ign"
                }]
              }
            }
          }
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-worker-1

  WorkerNode2:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 300
            VolumeType: gp2
        - DeviceName: /dev/xvdb
          Ebs:
            VolumeSize: 500
            VolumeType: gp2
      ImageId: ami-08f1807771f4e468b # 4.18 AMI - replace with newer RHCOS AMI if needed
      InstanceType: t2.2xlarge # Minimum for OCP base install to test need larger instance for CP4D
      SubnetId: !Ref PrivateSubnetAZ2Id
      SecurityGroupIds:
        - !Ref ClusterSecurityGroup
        - !Ref WorkerSecurityGroup
      UserData: !Base64
        Fn::Sub: |
          {
            "ignition": {
              "version": "3.2.0",
              "config": {
                "merge": [{
                  "source": "http://${IgnitionServerIP}:${IgnitionServerPort}${IgnitionPath}/worker.ign"
                }]
              }
            }
          }
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-worker-2

  WorkerNode3:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 300
            VolumeType: gp2
        - DeviceName: /dev/xvdb
          Ebs:
            VolumeSize: 500
            VolumeType: gp2
      ImageId: ami-08f1807771f4e468b # 4.18 AMI - replace with newer RHCOS AMI if needed
      InstanceType: t2.2xlarge # Minimum for OCP base install to test need larger instance for CP4D
      SubnetId: !Ref PrivateSubnetAZ3Id
      SecurityGroupIds:
        - !Ref ClusterSecurityGroup
        - !Ref WorkerSecurityGroup
      UserData: !Base64
        Fn::Sub: |
          {
            "ignition": {
              "version": "3.2.0",
              "config": {
                "merge": [{
                  "source": "http://${IgnitionServerIP}:${IgnitionServerPort}${IgnitionPath}/worker.ign"
                }]
              }
            }
          }
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-worker-3

  # Route53 DNS Records
  APIRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub api.${ClusterName}.${BaseDomain}
      Type: A
      AliasTarget:
        DNSName: !GetAtt NetworkLoadBalancer.DNSName
        HostedZoneId: !GetAtt NetworkLoadBalancer.CanonicalHostedZoneID

  APIInternalRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub api-int.${ClusterName}.${BaseDomain}
      Type: A
      AliasTarget:
        DNSName: !GetAtt NetworkLoadBalancer.DNSName
        HostedZoneId: !GetAtt NetworkLoadBalancer.CanonicalHostedZoneID

  AppsWildcardRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub '*.apps.${ClusterName}.${BaseDomain}'
      Type: A
      AliasTarget:
        DNSName: !GetAtt NetworkLoadBalancer.DNSName
        HostedZoneId: !GetAtt NetworkLoadBalancer.CanonicalHostedZoneID

Outputs:
  VPCId:
    Description: Existing VPC ID being used
    Value: !Ref VpcId

  NetworkLoadBalancerDNS:
    Description: Network Load Balancer DNS Name (Internal) - Single NLB for all TCP traffic
    Value: !GetAtt NetworkLoadBalancer.DNSName

  ClusterAPIEndpoint:
    Description: OpenShift API Endpoint (Internal via Route53)
    Value: !Sub https://api.${ClusterName}.${BaseDomain}:6443

  ClusterInternalAPIEndpoint:
    Description: OpenShift Internal API Endpoint (Internal via Route53)
    Value: !Sub https://api-int.${ClusterName}.${BaseDomain}:6443

  ClusterAppsWildcard:
    Description: Apps Wildcard Domain (Internal via Route53)
    Value: !Sub '*.apps.${ClusterName}.${BaseDomain}'

  ClusterDomain:
    Description: Full cluster domain
    Value: !Sub ${ClusterName}.${BaseDomain}

  IgnitionServer:
    Description: Ignition server configuration
    Value: !Sub http://${IgnitionServerIP}:${IgnitionServerPort}${IgnitionPath}/

  # Target Group ARNs for OpenShift installer configuration
  APITargetGroupArn:
    Description: API Target Group ARN
    Value: !Ref APITargetGroup
    Export:
      Name: !Sub ${AWS::StackName}-API-TargetGroup

  MCSTargetGroupArn:
    Description: MCS Target Group ARN
    Value: !Ref MCSTargetGroup
    Export:
      Name: !Sub ${AWS::StackName}-MCS-TargetGroup

  HTTPTargetGroupArn:
    Description: HTTP Target Group ARN
    Value: !Ref HTTPTargetGroup
    Export:
      Name: !Sub ${AWS::StackName}-HTTP-TargetGroup

  HTTPSTargetGroupArn:
    Description: HTTPS Target Group ARN
    Value: !Ref HTTPSTargetGroup
    Export:
      Name: !Sub ${AWS::StackName}-HTTPS-TargetGroup

  DNSConfiguration:
    Description: DNS records created in existing hosted zone
    Value: !Sub |
      DNS Records Created:
      - API Endpoint: api.${ClusterName}.${BaseDomain} -> ${NetworkLoadBalancer.DNSName}
      - Internal API: api-int.${ClusterName}.${BaseDomain} -> ${NetworkLoadBalancer.DNSName}
      - Apps Wildcard: *.apps.${ClusterName}.${BaseDomain} -> ${NetworkLoadBalancer.DNSName}

      Ignition Configuration:
      - Server: http://${IgnitionServerIP}:${IgnitionServerPort}${IgnitionPath}/
      - Bootstrap: bootstrap.ign
      - Master: master.ign
      - Worker: worker.ign

      Target Group Attachments:
      - Bootstrap node registered to API and MCS target groups
      - Master nodes registered to API and MCS target groups
      - Worker nodes registered to HTTP and HTTPS target groups

      Access from within VPC:
      - OpenShift Console: https://console-openshift-console.apps.${ClusterName}.${BaseDomain}
      - API: https://api.${ClusterName}.${BaseDomain}:6443
      - Internal API: https://api-int.${ClusterName}.${BaseDomain}:6443
